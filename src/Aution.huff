/* Imports */
#include "./utils/Utils.huff"
#include "./utils/HashMap.huff"

#define constant BENEFICIARY_LOCATION = FREE_STORAGE_POINTER()
#define constant AUCTION_END_TIME_LOCATION = FREE_STORAGE_POINTER()
#define constant HIGHEST_BIDER_LOCATION = FREE_STORAGE_POINTER()
#define constant HIGHEST_BID = FREE_STORAGE_POINTER()
#define constant PENDING_RETURNS_LOCATION = FREE_STORAGE_POINTER()
//boolean return 1 0r 0, would be set to false by default in the Constructor
#define constant ENDED = FREE_STORAGE_POINTER()

//event Signatures
#define constant HIHEST_BID_INCREASED_EVENT_SIG = 0x647278fbea15328be1b007ec17fcfe9994a32acf8436adaed9859b1300757e2a

#define constant AUCTION_ENDED_EVENT_SIG = 0x763363766247fd15c24e11a7e3facfe9367c90d11bfafa52b66a0556702df5d4  

///Macros :- EVM Bytecode snippets
///@dev THe idea is to pass the Constructor's code as hardcoded bytes at the end of our compiled bytecode before using create2

//CONSTRUCTOR takes in two args , appended at the end of the compiled bytecode
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    ///set ENDED to false
    0x00
    [ENDED] sstore
    ///beneficiary = beneficiaryAddress;
    0x20 0x40 codesize sub 0x00   
    codecopy 0x00 mload           
    [BENEFICIARY_LOCATION] sstore        

    ///auctionEndTime = block.timestamp + biddingTime;

    0x20 0x20 codesize sub 0x00   
    codecopy 0x00 mload
    timestamp 
    add           
    [AUCTION_END_TIME_LOCATION] sstore
}

///@dev
/// Bid on the auction with the value sent
/// together with this transaction.
/// The value will only be refunded if the
/// auction is not won. 
#define macro BID() = takes(0) returns(0) {
 
    ///@dev
   /// Revert the call if the bidding
  /// period is over.
  [AUCTION_END_TIME_LOCATION] sload
  timestamp
  gt
  error jumpi

  // If the bid is not higher, send the
  // money back (the revert statement
  // will revert all changes in this
  // function execution including
  // it having received the money). 
  
  //reading and writing from storage is costs more gas than if we initialized it at first in memory, just testing sload here and gas cost impact of it
  0x00
  [HIGHEST_BID] sload
  lt
  error jumpi
  0x00
  [HIGHEST_BID] sload
  eq
  error jumpi

  // if (highestBid != 0)
  0x00
  [HIGHEST_BID] sload
  gt
  cont jumpi
  0x00
  [HIGHEST_BID] sload
  lt
  cont jumpi
  caller
  [HIGHEST_BIDER_LOCATION] sload
  [HIGHEST_BID] sload
  add
  [PENDING_RETURNS_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
  cont jump

  error:
    0x00 0x00 revert

  cont:
    [HIGHEST_BIDER_LOCATION] sload
    caller sstore
    [HIGHEST_BID] sload
    callvalue sstore

    //emit the HIHEST_BID_INCREASED_EVENT_SIG
    caller callvalue 
    [HIHEST_BID_INCREASED_EVENT_SIG]
    0x00 0x00
    log2
}

#define macro WITHDRAW() = takes(0) returns(1) {
  
  //if (amount > 0)
  caller
  [PENDING_RETURNS_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)
  0x00
  lt
  return_true_location
  jumpi
  caller
  0x00
  [PENDING_RETURNS_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
  
  //prepare memory for send()
  0xb46300ec 0x00 mstore
  caller 
  [PENDING_RETURNS_LOCATION] LOAD_ELEMENT_FROM_KEYS(0X00)
  0x04 mstore //0x04 + 0x20 = 36 bytes

  ///@dev equivalent in solidity
  ///@dev if (!payable(msg.sender).send(amount)) {}

  0x20 //32 bytes output  
  0x00  //storage output offset
  0x24 //calldata is 36 bytes long
  0x00
  0x00 //callvalue is zero
  caller // msg.sender
  gas
  call
 iszero
 return_false_location jumpi



  //jumpdest for true 
  return_true_location:
    0x01 0x00 mstore
    0x20 0x00 return
//jumpdest for false
  return_false_location:
    0x00 0x00 mstore
    0x20 0x00 return
}

#define macro AUTION_END() = takes(0) returns(0) {
 [AUCTION_END_TIME_LOCATION] sload
 timestamp
 lt
 error jumpi

 0x01 
 [ENDED] sload
 eq
 error jumpi 


 error:
  revert 0x00 0x00
}

#define macro MAIN() = takes(0) returns (0) {
  0x00 calldataload 0xE0 shr
  dup1 0x1998aeef eq bid jumpi
  dup1 0x3ccfd60b eq withdraw jumpi
  dup1 0x2664e13d eq auctionEnd jumpi

  bid:
    BID()
  withdraw:
    WITHDRAW()
  auctionEnd:
    AUTION_END()
} 